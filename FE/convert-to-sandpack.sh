#!/bin/bash

# Script ƒë·ªÉ convert React source th√†nh format cho Sandpack
# Usage: ./convert-to-sandpack.sh [folder1] [folder2] ...
# Example: ./convert-to-sandpack.sh src/components/ui src/helpers

# C√°c folder c·∫ßn convert (c√≥ th·ªÉ truy·ªÅn v√†o qua arguments ho·∫∑c ƒë·ªãnh nghƒ©a ·ªü ƒë√¢y)
if [ $# -eq 0 ]; then
    # N·∫øu kh√¥ng c√≥ arguments, s·ª≠ d·ª•ng default folders
    FOLDERS=(
        "src/components/ui"
        "src/helpers"
        "src/lib"
        "src/services"
        "src/hooks"
    )
else
    # S·ª≠ d·ª•ng arguments ƒë∆∞·ª£c truy·ªÅn v√†o
    FOLDERS=("$@")
fi

OUTPUT_DIR="convert-sandpack"
INDEX_FILE="$OUTPUT_DIR/index.js"

# T·∫°o th∆∞ m·ª•c output
echo "Creating output directory: $OUTPUT_DIR"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

# Hi·ªÉn th·ªã folders s·∫Ω ƒë∆∞·ª£c process
echo "Folders to process:"
for folder in "${FOLDERS[@]}"; do
    if [ -d "$folder" ]; then
        echo "  ‚úì $folder"
    else
        echo "  ‚úó $folder (not found)"
    fi
done
echo ""

# Function ƒë·ªÉ convert full path th√†nh valid variable name
get_var_name() {
    local filepath="$1"
    # Lo·∫°i b·ªè prefix src/ n·∫øu c√≥
    local clean_path=$(echo "$filepath" | sed 's|^src/||')
    # L·∫•y path, lo·∫°i b·ªè extension, replace / v√† special chars v·ªõi _
    local name=$(echo "$clean_path" | sed 's/\.[^.]*$//' | sed 's/[^a-zA-Z0-9]/_/g' | sed 's/^_*//' | sed 's/_*$//')
    # ƒê·∫£m b·∫£o kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë
    if [[ $name =~ ^[0-9] ]]; then
        name="file_$name"
    fi
    echo "$name"
}

# Function ƒë·ªÉ replace environment variables v·ªõi gi√° tr·ªã th·ª±c t·∫ø
replace_env_vars() {
    local content="$1"
    
    # Replace c√°c bi·∫øn m√¥i tr∆∞·ªùng d·∫°ng ${...}
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_API_URL}/https:\/\/tav.mangoads.com.vn/g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_API_PREFIX}/api/g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_MINIO_CDN}/https:\/\/minio.mangoads.com.vn/g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_MINIO_BUCKET}/tav/g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_REPLACE_MEDIA}/\/media\//g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.VITE_REPLACE_FILE}/\/files\//g')
    content=$(echo "$content" | sed 's/\${import\.meta\.env\.NODE_ENV}/'"'"'production'"'"'/g')
    
    # Replace d·∫°ng kh√¥ng c√≥ d·∫•u {} - v·ªõi quoted values
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_API_URL/'"'"'https:\/\/tav.mangoads.com.vn'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_API_PREFIX/'"'"'api'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_MINIO_CDN/'"'"'https:\/\/minio.mangoads.com.vn'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_MINIO_BUCKET/'"'"'tav'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_REPLACE_MEDIA/'"'"'\/media\/'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_REPLACE_FILE/'"'"'\/files\/'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.NODE_ENV/'"'"'production'"'"'/g')
    
    # Replace d·∫°ng || default values (v√≠ d·ª•: import.meta.env.VITE_REPLACE_MEDIA || '/media/')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_REPLACE_MEDIA || '"'"'\/media\/'"'"'/'"'"'\/media\/'"'"'/g')
    content=$(echo "$content" | sed 's/import\.meta\.env\.VITE_REPLACE_FILE || '"'"'\/files\/'"'"'/'"'"'\/files\/'"'"'/g')
    
    echo "$content"
}

# Function ƒë·ªÉ escape content cho JavaScript string (gi·ªØ nguy√™n format)
escape_content() {
    local content="$1"
    
    # 1. Replace environment variables tr∆∞·ªõc
    content=$(replace_env_vars "$content")
    
    # 2. Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    # - Escape backslashes tr∆∞·ªõc
    # - Escape backticks  
    # - Escape dollar signs (ƒë·ªÉ tr√°nh variable substitution)
    # - Replace @/ th√†nh / (ƒë·ªÉ fix path imports)
    printf '%s' "$content" | sed 's/\\/\\\\/g' | sed 's/`/\\`/g' | sed 's/\$/\\$/g' | sed 's/@\//\//g'
}

# Arrays ƒë·ªÉ l∆∞u th√¥ng tin cho index file
declare -a var_names=()
declare -a file_paths=()
declare -a import_statements=()

echo "Processing files..."

# Process t·ª´ng folder ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
for folder in "${FOLDERS[@]}"; do
    if [ ! -d "$folder" ]; then
        echo "‚ö†Ô∏è  Folder not found: $folder"
        continue
    fi
    
    echo "üìÅ Processing folder: $folder"
    
    # T√¨m t·∫•t c·∫£ files trong folder hi·ªán t·∫°i
    find "$folder" -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.css" -o -name "*.json" \) | while read -r file; do
        echo "  Processing: $file"
        
        # L·∫•y relative path v√† lo·∫°i b·ªè prefix src/
        relative_path=$(echo "$file" | sed 's|^src/|/|')
        # N·∫øu kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng /, th√™m v√†o
        if [[ ! $relative_path =~ ^/ ]]; then
            relative_path="/$relative_path"
        fi
        
        # T·∫°o variable name d·ª±a tr√™n path ƒë√£ clean
        var_name=$(get_var_name "$file")
        
        # ƒê·ªçc content c·ªßa file
        if [ -f "$file" ]; then
            # ƒê·ªçc file m·ªôt c√°ch an to√†n
            content=$(<"$file")
            escaped_content=$(escape_content "$content")
            
            # T·∫°o file output v·ªõi t√™n unique
            output_file="$OUTPUT_DIR/${var_name}.js"
            
            # Ki·ªÉm tra n·∫øu file ƒë√£ t·ªìn t·∫°i (tr√πng variable name)
            counter=1
            original_var_name="$var_name"
            while [ -f "$output_file" ]; do
                var_name="${original_var_name}_${counter}"
                output_file="$OUTPUT_DIR/${var_name}.js"
                counter=$((counter + 1))
            done
            
            # T·∫°o file v·ªõi content ƒë∆∞·ª£c escape ƒë√∫ng c√°ch
            printf 'export const %s = `%s`;' "$var_name" "$escaped_content" > "$output_file"
            
            # L∆∞u th√¥ng tin cho index file
            echo "$var_name|$relative_path|$var_name" >> "$OUTPUT_DIR/temp_index_data.txt"
            
            echo "  Created: $output_file (var: $var_name)"
        fi
    done
done

echo "Creating index file..."

# T·∫°o index file
{
    echo "// Auto-generated index file for Sandpack"
    echo ""
    
    # T·∫°o import statements
    while IFS='|' read -r var_name file_path var_export; do
        echo "import { $var_export } from './${var_name}.js';"
    done < "$OUTPUT_DIR/temp_index_data.txt"
    
    echo ""
    echo "export const files = {"
    
    # T·∫°o object entries v·ªõi format m·ªõi
    while IFS='|' read -r var_name file_path var_export; do
        echo "  '$file_path': {"
        echo "    code: $var_export,"
        echo "    active: true,"
        echo "  },"
    done < "$OUTPUT_DIR/temp_index_data.txt"
    
    echo "};"
    echo ""
    echo "export default files;"
    
} > "$INDEX_FILE"

# Cleanup temp file
rm -f "$OUTPUT_DIR/temp_index_data.txt"

echo ""
echo "‚úÖ Conversion completed!"
echo "üìÅ Output directory: $OUTPUT_DIR"
echo "üìÑ Index file: $INDEX_FILE"
echo ""
echo ""
echo "Usage examples:"
echo "1. Use default folders:"
echo "   ./convert-to-sandpack.sh"
echo ""
echo "2. Specify custom folders:"
echo "   ./convert-to-sandpack.sh src/components/ui src/helpers"
echo "   ./convert-to-sandpack.sh src/components src/utils src/hooks"
echo ""
echo "3. Import in your code:"
echo "   import { files } from './convert-sandpack/index.js';"
echo "   // files object contains all your source files as strings"
echo ""
echo "File structure:"
echo "convert-sandpack/"
echo "‚îú‚îÄ‚îÄ index.js           # Main export file"
echo "‚îú‚îÄ‚îÄ [component1].js    # Individual file exports"
echo "‚îú‚îÄ‚îÄ [component2].js"
echo "‚îî‚îÄ‚îÄ ..."